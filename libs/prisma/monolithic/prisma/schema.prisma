generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma-client.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique @db.VarChar(30)
  full_name  String   @db.VarChar(255)
  password   String
  roles      String[]
  orders     Order[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Product {
  id                   String               @id @default(uuid())
  category             Category             @relation(fields: [category_id], references: [id])
  category_id          String
  name                 String               @unique @db.VarChar(255)
  price                Int
  image                Image?
  description          String?
  product_compositions ProductComposition[]
  order_detail         OrderDetail[]
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
}

model Image {
  id         String  @id @default(uuid())
  uid        String  @unique @db.VarChar(255)
  name       String
  size       Int
  type       String
  url        String
  product    Product @relation(fields: [product_id], references: [id])
  product_id String  @unique
}

model Category {
  id         String    @id @default(uuid())
  name       String    @unique @db.VarChar(255)
  products   Product[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Composition {
  id                   String               @id @default(uuid())
  name                 String               @unique @db.VarChar(255)
  unit                 String               @db.VarChar(255)
  stock                Float
  product_compositions ProductComposition[]
  created_at           DateTime             @default(now())
  updated_at           DateTime             @updatedAt
}

model ProductComposition {
  id             String      @id @default(uuid())
  product        Product     @relation(fields: [product_id], references: [id])
  product_id     String
  composition    Composition @relation(fields: [composition_id], references: [id])
  composition_id String
  quantity       Float
  unit           String      @db.VarChar(255)
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model Order {
  id            String        @id @default(uuid())
  number        String        @unique @db.VarChar(255)
  user          User          @relation(fields: [user_id], references: [id])
  user_id       String
  total_amount  Int
  order_details OrderDetail[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}

model OrderDetail {
  id          String   @id @default(uuid())
  order       Order    @relation(fields: [order_id], references: [id])
  order_id    String
  product     Product  @relation(fields: [product_id], references: [id])
  product_id  String
  quantity    Int
  total_price Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
